Time Complexity: O(n*log(log n)) - classical
                 O(n) - optimized
Space Complexity: O(n)

PSEUDOCODE

Sieve_Of_Eratosthenes(n)
{
  for d=2, d*d<=n, d=d+1
  {
    if sieve[d]==0
    {
      for i=d*d, i<=n, i=i+d
      {
        sieve[i]=1
      }
    }
  }
}


C++

#include <iostream>

void Sieve(int n)
{
    bool ok[n+5]={0};
    ok[0]=ok[1]=1;
    for(int i=4; i<=n; i+=2)  /// All the even values apart from 2 are marked
        ok[i]=1;
    for(int i=3; i*i<=n; i+=2)   /// Check for all prime numbers
        if(!ok[i])
            for(int j=i*i; j<=n; j+=2*i)  /// Mark their unencountered multiples
                ok[j]=1;
    for(int i=1; i<=n; i++)
        std::cout << i << ' ' << ok[i] << '\n';  /// If ok[i] is equal to 0, it is prime
}

int main()
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    int n;
    std::cin >> n;
    Sieve(n);
    return 0;
}


Python

import math

def Sieve(n):
    ok = []
    for i in range(n):
        ok.append(0)
    ok[0]=ok[1]=1
    for i in range(4, n, 2):  # Mark all the even values except for 2
        ok[i]=1
    for i in range(3, int(math.sqrt(n)), 2):
        if ok[i]==0:
            for j in range(i*i, n, 2*i):  #Check all the multiples starting from i*i
                ok[j]=1
    for i in range(n):
        print(str(i)+' '+str(ok[i]))  # If ok[i] is equal to 0, it is prime


n = 100

Sieve(n)
