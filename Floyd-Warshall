Time Complexity: O(|V|^3), where |V| is the number of vertices
Space Complexity: O(|V|^2)

PSEUDOCODE

Floyd_Warshall(n, a[][])
{
    for k=1, k<=n, k=k+1  (Intermediate node)
    {
        for i=1, i<=n, i=i+1
        {
            for j=1, j<=n, j=j+1
            {
                if i!=j and a[i][k]!=0 and a[k][j]!=0 and (a[i][j]==0 or a[i][j] > a[i][k]+a[k][j])) (Recurrence condition)
                    a[i][j] = a[i][k]+a[k][j];
}


C++

#include <iostream>

#define nMax 105

void Floyd_Warshall(int n, int a[nMax][nMax])
{
    for(int k=1; k<=n; k++) 
        for(int i=1; i<=n; i++)
            for(int j=1; j<=n; j++)
                if(i!=j && a[i][k] && a[k][j] && (!a[i][j] || a[i][j] > a[i][k]+a[k][j])) 
                    a[i][j] = a[i][k]+a[k][j];
}

int main()
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    int n;
    std::cin >> n;

    int a[nMax][nMax];
    for(int i=1; i<=n; i++)
        for(int j=1; j<=n; j++)
            std::cin >> a[i][j];

    Floyd_Warshall(n, a);

    /// The result is the distance matrix of the graph
    for(int i=1; i<=n; i++)
        for(int j=1; j<=n; j++)
            std::cout << a[i][j] << " \n"[j==n];
    return 0;
}


Python

def Floyd_Warshall(n, mat):
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if i!=j and mat[i][k] and mat[k][j] and (mat[i][j]==0 or mat[i][j] > mat[i][k]+mat[k][j]):
                    mat[i][j] = mat[i][k] + mat[k][j]


n = 5
mat = [[0, 3, 9, 8, 3], [5, 0, 1, 4, 2], [6, 6, 0, 4, 5], [2, 9, 2, 0, 7], [7, 9, 3, 2, 0]]

Floyd_Warshall(n, mat)

print(mat)

