PSEUDOCODE

Radix_Sort(arr, d)
{
  for j=1, j<d, j=j+1
  {
    Integer count[10]={0};
    for i=0, i<n, i=i+1
    {
      count[key of(arr[i]) in pass j] -> count[key of(arr[i]) in pass j]+1
      for k=1, k<10, k=k+1
      {
        count[k] -> count[k] + count[k-1]
        for i=n-1, i>0, i=i-1
        {
          result[count[key of(arr[i])]] -> arr[j]
          count[key of(arr[i])] -> count[key of(arr[i])]-1
          for i=0, i<n, i=i+1
          {
            arr[i] -> result[i]
          }
        }
      }
   }
 }


C++ //optimised with bit operations
Sort a N elements vector generated by the following recurrence:
v[i] = B, i = 1
v[i] = (A * v[i-1] + B) % C, 2 ≤ i ≤ N
N, A, B, C, given

#include <iostream>
#include <vector>
 
void Radix_Sort(vector<int>& v)
{
    vector<int> cnt(256);
    vector<int> out((int)v.size());
    for(int bit=0; bit<=31; bit+=8)
    {
        for(auto& x:v)
            cnt[(x>>bit)&255]++;
        for(int i=1; i<256; i++)
            cnt[i]+=cnt[i-1];
        for(int i=(int)v.size()-1; i>=0; i--)
            out[--cnt[(v[i]>>bit)&255]]=v[i];
        v=out;
        fill(cnt.begin(), cnt.end(), 0);
    }
}
 
int main()
{
    int n,a,b,c;
    std::cin >> n >> a >> b >> c;
    vector<int> v(n);
    v[0]=b;
    for(int i=1;i<n;i++)
        v[i]=(1LL*a*v[i-1]+b)%c;
    Radix_Sort(v);
    for(int i=0; i<(int)v.size(); i+=10)
        std::cout<< v[i] << ' ';
    return 0;
}


Python

def Counting_Sort(arr, exp1):
    n = len(arr)
    output = [0] * (n)
    count = [0] * (10)
    for i in range(0, n):
        index = (arr[i] / exp1)
        count[(index) % 10] += 1
    for i in range(1, 10):
        count[i] += count[i-1]
    i=n-1
    while i>=0:
        index = (arr[i]/exp1)
        output[count[(index)%10]-1] = arr[i]
        count[(index)%10] -= 1
        i-=1
    i=0
    for i in range(0, len(arr)):
        arr[i] = output[i]

def Radix_Sort(arr):
    max1 = max(arr)
    exp = 1
    while max1 / exp > 0:
        Counting_Sort(arr, exp)
        exp *= 10

a = [2, 56, 45, 13, 9, 0]

Radix_Sort(a)
print(a)
