Time Complexity: O(n*W)
Space Complexity: O(n) (optimized)

PSEUDOCODE

(Recurrence relation for O(n^2) space complexity - !! 0-indexed array of items)
            | 0,                                        if i=0, cw=0;
dp[i][cw] = | dp[i-1][cw],                              if w[i] > cw;
            | max(dp[i-1][cw], dp[i-1][cw-w[i]]+v[i]),  if i>0, w[i] < cw.
            

C++

#include <iostream>

#define nMax 10005

int main()
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    int n, W;
    std::cin >> n >> W;
    int w[nMax], v[nMax];
    for(int i=1; i<=n; i++)
        std::cin >> w[i] >> v[i];
    int sol = 0, dp[nMax] = {0};
    for(int i=1; i<=n; i++)
        for(int j=W-w[i]; j>=0; j--)  /// Starting from the maximum possible weight
            if(dp[j+w[i]] < dp[j]+v[i])
            {
                dp[j+w[i]] = dp[j]+v[i];  /// Second case in max
                sol = std::max(sol, dp[j+w[i]]);  /// sol stores the first case in max
            }
    std::cout << sol;  /// sol is actually dp[W]
    return 0;
}


Python

n = 6
maximum_weight = 10
items = [[3, 7], [3, 4], [1, 2], [1, 9], [2, 4], [1, 5]]  # items[i][0] is the weight of the item i and the items[i][1] is its value

total_value = 0
dp = []
for i in range(maximum_weight+1):  # initialize the dp structure (list) with maximum_weight 0 elements
    dp.append(0)

for i in range(0, n):
    for j in range(maximum_weight-items[i][0], -1, -1):
        if dp[j+items[i][0]] < dp[j]+items[i][1]:  # Recurrence's third branch
            dp[j + items[i][0]] = dp[j] + items[i][1]
            total_value = max(total_value, dp[j + items[i][0]])

print(total_value)

