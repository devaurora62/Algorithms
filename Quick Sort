PSEUDOCODE

Quick_Sort(arr[], start, finish)
{
    if start < finish
    {
        pivot = partition(arr, start, finish) //start, finish or (start+finish)/2
        quickSort(arr, start, pivot-1)
        quickSort(arr, pivot+1, finish)
    }
}


Implementation with median as a pivot:
C++

#include <iostream>

#define nMax 100001

void Quick_Sort(int a[], int left, int right)
{
    int i=left, j=right, mid=(left+right)/2;
    int piv=a[mid];
    while(i<=j)
    {
        while(a[i]<piv)
            i++;
        while(a[j]>piv)
            j--;
        if(i<=j)
        {
            std::swap(a[i], a[j]);
            i++;
            j--;
        }
    }
    if(i<right)
        Quick_Sort(a, i, right);
    if(j>left)
        Quick_Sort(a, left, j);
}

int main()
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    int n, a[nMax];
    std::cin >> n;
    for(int i=1; i<=n; i++)
        std::cin >> a[i];
    Quick_Sort(a, 1, n);
    for(int i=1; i<=n; i++)
        std::cout << a[i] << ' ';
    return 0;
}


Python

def Quick_Sort(arr, left, right):
    i=left
    j=right
    mid=int((left+right)/2)
    piv = arr[mid]
    while i<=j:
        while arr[i] < piv:
            i += 1
        while arr[j] > piv:
            j -= 1
        if i<=j:
            arr[i], arr[j] = arr[j], arr[i]
            i += 1
            j -= 1
    if i<right:
        Quick_Sort(arr, i, right)
    if j>left:
        Quick_Sort(arr, left, j)

# 2 56 45 13 9 0
a = [2, 56, 45, 13, 9, 0]
n = len(a)

Quick_Sort(a, 0, n-1)
print(a)
