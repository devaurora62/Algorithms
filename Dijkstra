Time Complexity: O(|E|*log |V|), where |V| is the number of vertices and |E| the number of edges
Additional Space: O(|V|)

PSEUDOCODE

Dijkstra(n, m, G)
{
  Priority_Queue of Pairs Q;  (Create a priority queue of pairs that sorts its element based on the distance of the edge) 
  Q.add((0, start_node))  (Push the source node)
  Integer dist[]
  for i=2, i<=n, i=i+1
  {
    dist[i] <- -INF  (Initialize the distance array with the smallest integer)
    Q.add((d[i], i))  (Add them in the queue too)
  }
  Bool vis[]
  while Q.length != 0  
  {
    if vis[Q.top.second] == False  (If the element with the biggest priority has not been visited yet)
    {
            x <- Q.top.second;
            for i=1, i<=G[x].length, i=i+1
            {
                if -G[x][i].second+dist[x]>dist[G[x][i].first] ("Relax" the edge; found an intermediate node that minimizes the distance)
                {
                    Q.add((-G[x][i].second+d[x], G[x][i].first))
                    dist[G[x][i].first] <- -G[x][i].second+dist[x]
                }
            }
            vis[x] <- True; 
    }
    else
    {
      Q.pop
    }
  }
  Output dist[]
}
            

C++
/// We consider the first node to be the source and calculate the distance to 2, 3, ..., n

#include <iostream>
#include <vector>
#include <bitset>
#include <queue>

#define nMax 50005

int main()
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    int n, m;
    std::cin >> n >> m;

    std::vector<std::pair<int, int>> G[nMax];  /// List of adjacency
    while(m--)
    {
        int x, y, dist;
        std::cin >> x >> y >> dist;
        G[x].push_back({y, dist});
    }

    std::priority_queue<std::pair<int, int>> Q;  /// First parameter of each pair is the 1-i distance in order to establish the priority by it
    Q.push({0, 1});

    int d[nMax]={0};
    const int INF=1e9;
    for(int i=2; i<=n; i++)
    {
        d[i]=-1e9;
        Q.push({d[i], i});
    }

    std::bitset<nMax> vis;
    while(!Q.empty())
    {
        if(!vis[Q.top().second])
        {
            int x = Q.top().second;
            for(auto i:G[x])
                if(-i.second+d[x]>d[i.first])  /// Found x as an intermediate node that improves the distance between 1 and i
                {
                    Q.push({-i.second+d[x], i.first});
                    d[i.first] = -i.second+d[x];
                }
            vis[x]=1;
        }
        else
            Q.pop();
    }

    for(int i=2; i<=n; i++)
        if(d[i]!=-INF)
            std::cout << -d[i] << " ";
        else  /// There is no access to this node
            std::cout << "0 ";
    return 0;
}


Python 

n     = 6  # The number of nodes
edges = [(1,2,3),(1,3,2),(2,4,6),(2,5,5),(3,4,3),(3,6,10),(3,4,3),(4,5,6),(5,6,2)]  # Each edge is represented by a tuple that contains (node1, node2, weight)

# First, we need to create the graph 
graph   = {}  # The graph will be a dictionary
infinty = float("inf")
for i in range(n):
    graph[i+1] = {}
for i in edges:
    graph[i[0]][i[1]] = i[2]
    
# Some functions to make the code easier to read 
# possible_paths gives the possible nodes you can pass from that aren't checked already 
def possible_paths(checked, related):
    result = []
    for i in related:
        if not(i in checked):
            result.append(i)
    return result
    
# short_roads gives the node with the smaller wait that isn't checked 
def short_road(table, checked):
    for i in table: 
        if not (i[0] in checked):
            mini,key,n = i[1],i[0],len(table)
            break
    for i in range(n):
        if table[i][1] < mini and not(i+1 in checked):
            mini,key = table[i][1],table[i][0]
    return key

# Now, we create Dijkstra's algorithm
def dijkstras(graph, start, end):
    checked = []
    # The table will contain the shortest road to each node 
    table = [[start, 0, '']]
    for i in range(2,n+1):
        table.append([i, infinty, ''])
    while len(checked) < n:
        key = short_road(table, checked) 
        nodes = graph[key].keys()  # The nodes form the node key
        checked.append(key) 
        nodes = possible_paths(checked, list(nodes))
        for i in nodes:
            if table[i-1][1] > table[key-1][1] + graph[key][i]:
                table[i-1][1] = table[key-1][1] + graph[key][i]
                table[i-1][2] = key
    # The shortcut will cross backward the table to find the smaller path 
    shortcut = [end]
    print(table)
    while True:
        shortcut.append(table[shortcut[-1]-1][2])
        if shortcut[-1] == start:
            break
    shortcut.reverse()
    return shortcut

print(dijkstras(graph,1,6))
