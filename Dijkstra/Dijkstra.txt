(This code is contributed by @iuliagroza)

Time Complexity: O(|E|*log |V|), where |V| is the number of vertices and |E| the number of edges
Additional Space: O(|V|)

PSEUDOCODE

Dijkstra(n, m, G)
{
  Priority_Queue of Pairs Q;  (Create a priority queue of pairs that sorts its element based on the distance of the edge) 
  Q.add((0, start_node))  (Push the source node)
  Integer dist[]
  for i=2, i<=n, i=i+1
  {
    dist[i] <- -INF  (Initialize the distance array with the smallest integer)
    Q.add((d[i], i))  (Add them in the queue too)
  }
  Bool vis[]
  while Q.length != 0  
  {
    if vis[Q.top.second] == False  (If the element with the biggest priority has not been visited yet)
    {
            x <- Q.top.second;
            for i=1, i<=G[x].length, i=i+1
            {
                if -G[x][i].second+dist[x]>dist[G[x][i].first] ("Relax" the edge; found an intermediate node that minimizes the distance)
                {
                    Q.add((-G[x][i].second+d[x], G[x][i].first))
                    dist[G[x][i].first] <- -G[x][i].second+dist[x]
                }
            }
            vis[x] <- True; 
    }
    else
    {
      Q.pop
    }
  }
  Output dist[]
}