Time Complexity: O(n^2)
Additional Space: O(1)


PSEUDOCODE

selectionSort(arr)
{
    for i=0, i<arr.length-1, i<-i+1
    {
        minIndex <- i
        for j=i+1, j<arr.length, j<-j+1
        {
            if arr[minIndex} > arr[j]
            {
                minIndex <- j
            }
        }
        
        (swap)
        aux <- a[i]
        a[i] <- a[minIndex]
        a[minIndex} <- a[i]
    }
}


C++

#include <iostream>
#include <algorithm>

void selectionSort(int a[], int n)
{
    for(int i=0; i<n-1; i++) {
        int min_index = i; // Minimum value position
        for(int j=i+1; j<n; j++) {
            if (a[min_index] > a[j]) {
                min_index = j;
            }
        std::swap(a[i], a[min_index]);
        }
    }
}

int main()
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);

    int n, a[100];
    std::cin >> n;
    for(int i=0; i<n; i++) {
        std::cin >> a[i];
    }
    
    selectionSort(a, n);
    
    for(int i=0; i<n; i++) {
        std::cout << a[i] << ' ';
    }
    return 0;
}


Python

def selectionSort(a):
    # Traverse through all array elements
    for i in range(len(a)):
        # Find the minimum element in remaining unsorted array
        min_index = i
        for j in range(i + 1, len(a)):
            if a[min_index] > a[j]:
                min_index = j

        # Swap the found minimum element with the first element
        a[i], a[min_index] = a[min_index], a[i]

    for i in range(len(a)):
        print("%d" % a[i]),

a = [64, 25, 12, 22, 11]
selectionSort(a)


Java

public class SelectionSort  {

    public static void sort(int[] arr) {
        int n = arr.length;
        for(int i=0;i<n-1;i++)
        {
            int minIndex = i; //pointer to store index of current val
            for(int j=i+1;j<n;j++)
            {
                if(arr[minIndex] > arr[j]) // if we found a lesser value than our current pointer value then we will store that index value to our minIndex variable
                {
                    minIndex = j; // storing the index in minIndex variable
                }
            }

            //swapping the minimum element with the pointer element
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;

        }
    }

    public static void print(int[] arr) {
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i] + " ");
        }
    }

    public static void main(String[] args) {
        int arr[] = {5,12,9,3,1,6};
        sort(arr);
        print(arr);

    }
}

// THIS CODE IS CONTRIBUTED BY @Abbeyme1 
