(This code is contributed by @iuliagroza)

Time Complexity: O(|V|*|E|), where |V| is the number of vertices and |E| the number of edges
Additional Space: O(|V|)

PSEUDOCODE

Bellman_Ford(node, G, ok, dist)
{
  dist[] <- INF  (Initialize the distance array wiith infinity)
  dist[node] <- 0
  Queue Q
  Q.add(node)
  Bool vis[]
  vis[node] <- True
  Integer nr[]
  while Q.length != 0  (|V|-1 loop to update the distances ~ BFS)
  {
    node <- Q.front
    Q.pop
    vis[node] <- False
    for i=1, i<=n, i=i+1
    {
      if dist[node]+i.second < dist[i.first]  (Found a shorter distance)
      {
        dist[i.first] <- dist[node]+i.second
        nr[i.first] <- nr[i.first]+1
        if nr[i.first] > n  (Found a negative cycle)
        {
          ok <- True
          EXIT
        }
        if vis[i.first] == False
        {
          Q.add(i.first)
          vis[i.first] <- True
        }
      }
    }
  }
}
