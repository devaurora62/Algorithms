Time Complexity: O(|E|*log|V|)/O(|E|*log|E|), where |V| is the number of vertices and |E| the number of edges
Additional Space: O(|V|)

PSEUDOCODE

Kruskal(n, m, edges)
{
  Sort edges
  Array of pairs of Integers sol
  for i=1, i<=m and sol.length<n-1, i=i+1
  {
    if edges.first and edges.second not in the same set
    {
      Unify(edges.first, edges.second)
      cost <- cost+edges.distance
      sol.add((edges.first, edges.second))
    }
  }
  Output sol
}


C++

#include <iostream>
#include <vector>
#include <algorithm>

#define nMax 400005

struct edge {
    int a, b, d;
} v[nMax];

bool cmp(edge x, edge y)
{
    return x.d < y.d;
}

int Find(int x, int p[])  /// Find the set of x function for DSU
{
    /// Height compression algorithm
    int r=x;
    while(r!=p[r])
        r=p[r];
    while(p[x]!=r)
    {
        int tmp=p[x];
        p[x]=r;
        x=tmp;
    }
    return r;
}

void Union(int x, int y, int p[])  /// Unify the sets of x and y for DSU
{
    int rx=Find(x, p);
    int ry=Find(y, p);
    if(rx!=ry)
        p[rx]=ry;
}

int main()
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    int n, m;
    std::cin >> n >> m;

    for(int i=1; i<=m; i++)
        std::cin >> v[i].a >> v[i].b >> v[i].d;

    std::sort(v+1, v+m+1, cmp);  /// Sort the edges in non-decreasing order

    int p[nMax]={0};  /// Establish the parents of each vertex - they're initially each own's parent
    for(int i=1; i<=n; i++)
        p[i]=i;

    int cost=0;
    std::vector<std::pair<int, int>> sol;
    for(int i=1; i<=m && sol.size()<(n-1); i++)  /// DSU
        if(Find(v[i].a, p)!=Find(v[i].b, p))
        {
            cost+=v[i].d;
            Union(v[i].a, v[i].b, p);
            sol.push_back({v[i].a, v[i].b});
        }

    std::cout << cost << '\n' << n-1 << '\n';
    for(int i=0; i<n-1; i++)
        std::cout << sol[i].first << ' ' << sol[i].second << '\n';
    return 0;
}


Python  # Implemented by MahmoudFettal

n = 5  # The number of nodes
edges = [(1,2,1),(1,3,5),(2,3,6),(2,4,7),(3,5,3),(3,4,4),(4,5,8),(1,5,2)]  # Each edge is represented by a tuple that contains (node1, node2, weight)

# A quick sort for the weights
def sort_weights(L):
    if len(L) < 2:
            return L
    T,R,M = [],[],[]
    index = L[len(L)//2][2]
    for i in L:
        if i[2] < index:
            T.append(i)
        elif i[2] > index:
            R.append(i)
        else:
            M.append(i)
    return sort_weights(T) + M + sort_weights(R)

# Check if the edge will create a cycle
def cycle_check(tree,checked,a,b):
    for i in checked: 
        if i != a and i!=b:
            truth = 2
            for j in tree:
                if i in [j[0],j[1]] and a in [j[0],j[1]]:
                    truth -= 1 
                elif i in [j[0],j[1]] and b in [j[0],j[1]]:
                    truth -= 1 
                if truth == 0:
                    return True
    return False

# The algorithm
def Kruskal(edges):
    checked = []
    tree    = []
    edges   = sort_weights(edges)
    for i in edges:
        if not(cycle_check(tree,checked,i[1],i[0])):
            tree.append(i)
            checked = list(set(checked+[i[0]]+[i[1]]))
    return tree

# Test
print(Kruskal(edges))
