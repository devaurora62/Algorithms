Time Complexity: O(|V|+|E|), where |V| is the number of vertices and |E| the number of edges
Space Complexity: O(|V|)

PSEUDOCODE

BFS(node, G[][], visited[], dist[], queue[])
{
  vis[node] <- True
  Q.push(node)
  while Q is not empty
  {
    node <- Q.front
    Q.pop
    for i=1, i<=n, i=i+1
    {
      if vis[i]==False
      {
        dist[i] <- dist[node]+1
        vis[i] <- True
        Q.push(i)
      }
    }
  }
}


/// Shortest path (minimum number of edges) between a source node and all the others using BFS in a directed graph
C++

#include <iostream>
#include <vector>
#include <queue>
#include <bitset>

#define nMax 100005

void bfs(int node, std::bitset<nMax> vis, std::queue<int> Q, int d[], std::vector<int> G[])
{
    vis[node] = 1;  /// We mark the vertex as visited
    Q.push(node);  /// We push it into the queue
    while(!Q.empty())
    {
        node = Q.front();
        Q.pop();
        for(auto i:G[node]) 
            if(!vis[i])  /// Searching for unvisited neighbours
            {
                d[i] = d[node]+1;  /// Update the distance of i
                vis[i] = 1;
                Q.push(i);
            }
    }
}

int main()
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    int n, m, s;
    std::cin >> n >> m >> s;

    std::vector<int> G[nMax];  /// Our graph is represented as a list (vector) of adjacency
    while(m--)
    {
        int x, y;
        std::cin >> x >> y;
        G[x].push_back(y);
    }

    int d[nMax]={0};
    std::queue<int> Q;
    std::bitset<nMax> vis;

    bfs(s, vis, Q, d, G);

    for(int i=1; i<=n; i++)
        if(d[i]==0 && i!=s)  /// If the distance to a node is 0 and this is not the source node, then it means the two are not in the same connected component 
            std::cout << "-1 ";
        else
            std::cout << d[i] << " ";
    return 0;
}


Python

n = 5
m = 7
s = 2
edges = [[1, 2], [2, 1], [2, 2], [3, 2], [2, 5], [5, 3], [4, 5]]

G = {}  # Represent the graph as a list of adjacency (dictionary) 
for i in range(1, n+1): 
    G.update({i: []})

for i in range(len(edges)): 
    G[edges[i][0]].append(edges[i][1])

dist = []  # The solution list
vis = []
for i in range(1, n + 2):
    dist.append(0)
    vis.append(0)
Q = []  # The queue

def bfs(node, G, dist, vis, Q):
    vis[node] = 1
    Q.append(node)
    while len(Q)!=0:
        node = Q[0]
        Q.pop(0)
        for i in range(len(G[node])):  # Search through the node's unvisited neighbours
            if vis[G[node][i]] == False:
                vis[G[node][i]] = True
                dist[G[node][i]] = dist[node]+1
                Q.append(G[node][i])

bfs(s, G, dist, vis, Q)

for i in range(1, n+1):
    if dist[i]==0 and i!=s:
        print(-1)
    else:
        print(dist[i])
