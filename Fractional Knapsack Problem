Time Complexity: O(n*log n) (sorting)

PSEUDOCODE

Fractional_Knapsack(n, maximum_weight, arr[value, weight])
{
  for i=1, i<=n, i=i+1
  {
    arr[i].profit <- arr[i].value/arr[i].weight  (Calculate the profit of each item)
  }
  sort(arr, arr.profit)  (Sort the list of items in ascending order by their profit)
  current_weight <- maximum_weight
  for i=1, i<=n, i=i+1
  {
    if current_weight > arr[i].weight  (If the object is not too heavy)
    {
      total_value <- total_value + arr[i].value
      current_weight <- current_weight - arr[i].weight
    }
    else
    {
      (If whole_value/whole_weight = fractional_value/fractional_weight (proportionality), then we can deduct that fractional_value = (whole_value*fractional_weight)/whole_weight)
      total_value <- total_value + Float((arr[i].value*current_weight)/arr[i].weight)
      END OF FOR
    }
  }
  Output total_value
}
  


C++

#include <iostream>
#include <algorithm>

#define nMax 1001

struct object{
    float w, v, profit;
} a[nMax];

bool cmp(object x, object y)
{
    return y.profit < x.profit;  /// Comparator to sort the array in ascending order by the items' profit
}

int main()
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    int n;
    float wmax;
    std::cin >> n >> wmax;
    for(int i=1; i<=n; i++)
    {
        std::cin >> a[i].w >> a[i].v;
        a[i].profit = a[i].v/a[i].w;  /// Calculate the profit
    }
    std::sort(a+1, a+n+1, cmp);  /// Sort the items
    float s=0, weight=wmax;
    for(int i=1; i<=n; i++)
    {
        if(weight>a[i].w)
        {
            s+=a[i].v;
            weight -= a[i].w;
        }
        else
        {
            s+=(float)(a[i].v*weight)/a[i].w;  /// Convert into float for the fractional value
            break;  /// If we got here it means that this is the last item that can (partially) fit into the knapsack
        }
    }
    std::cout << s;
    return 0;
}


Python

n = 4
maximum_weight = 30
items = [[10, 60], [5, 50], [12, 60], [20, 140]]  # items[i][0] is the weight of the item i and the items[i][1] is its value
profit = []

for i in range(len(items)):
    items[i].append(items[i][0]/items[i][1])  # Calculate the profit of each item: items[i][2]

from operator import itemgetter

items = sorted(items, key=itemgetter(2))  # Sort items by items[i][2]

total_value = 0
current_weight = maximum_weight
for i in range(len(items)):
    if current_weight >= items[i][0]:  # If the whole item fits into the knapsack
        current_weight -= items[i][0]
        total_value += items[i][1]  # Add its value
    else:
        total_value += (items[i][1]*current_weight)/items[i][0]  # The fractional weight is equal to the current weight
        break

print(total_value)
